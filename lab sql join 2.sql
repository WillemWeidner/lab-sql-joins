USE sakila;

#1. List the number of films per category.
SELECT c.name as genre_name , COUNT(distinct fc.film_id) as number_of_movies
FROM sakila.category c
JOIN sakila.film_category fc
ON c.category_id = fc.category_id
GROUP BY c.name
ORDER BY c.name ASC;

#2. Retrieve the store ID, city, and country for each store.
SELECT s.store_id, c.city, co.country
FROM sakila.store s
JOIN sakila.address a
USING (address_id)
JOIN sakila.city c
USING (city_id)
JOIN sakila.country co
USING(country_id);

-- 3. Calculate the total revenue generated by each store in dollars.
SELECT sakila.store.store_id, CONCAT('$',SUM(sakila.payment.amount)) AS total_revenue
FROM sakila.store
JOIN sakila.customer
ON sakila.store.store_id = sakila.customer.store_id
JOIN sakila.payment
ON sakila.customer.customer_id = sakila.payment.customer_id
GROUP BY sakila.store.store_id;

-- 4. Determine the average running time of films for each category
SELECT fc.category_id, AVG(length) AS average
FROM sakila.film f
JOIN sakila.film_category fc
USING (film_id)
GROUP BY fc.category_id;

SELECT fc.category_id, AVG(length) as average
 FROM sakila.film f
 JOIN sakila.film_category fc
 USING (film_id)
 GROUP BY fc.category_id;
 
 
 -- 5. Identify the film categories with the longest average running time.
 SELECT fc.category_id, AVG(length) as average
 FROM sakila.film f
 JOIN sakila.film_category fc
 USING (film_id)
 GROUP BY fc.category_id 
 ORDER BY average DESC LIMIT 1;
 
 
 -- 6. Display the top 10 most frequently rented movies in descending order.
 SELECT film.title, film.rental_rate
 FROM sakila.film;
 ORDER BY film.rental_rate DESC
 LIMIT 10;
 
 -- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
 
SELECT * 
FROM INVENTORY;
SELECT *
FROM FILM;

SELECT i.store_id, (IF(title = 'Academy Dinosaur','Yes','NO')) AS available
FROM inventory i
JOIN film f
USING(film_id)
WHERE f.title='Academy Dinosaur' and store_id = 1
GROUP BY store_id;

# 8.Provide a list of all distinct film titles, along with their availability status in the inventory.
#Include a column indicating whether each title is 'Available' or 'NOT available.' 
#Note that there are 42 titles that are not in the inventory, and this information can be obtained
#using a CASE statement combined with IFNULL."

SELECT DISTINCT film_id,title,
CASE WHEN inventory_id is NULL THEN 'Not Available'
ELSE "Available"
END AS Availability
FROM film
LEFT JOIN inventory 
USING (film_id); -- need to do a left join because some film titles are not in inventory